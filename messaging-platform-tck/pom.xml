<?xml version="1.0" encoding="UTF-8"?>
<!--
  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

  Copyright (c) 2024 Payara Foundation and/or its affiliates. All rights reserved.

  The contents of this file are subject to the terms of either the GNU
  General Public License Version 2 only ("GPL") or the Common Development
  and Distribution License("CDDL") (collectively, the "License").  You
  may not use this file except in compliance with the License.  You can
  obtain a copy of the License at
  https://github.com/payara/Payara/blob/master/LICENSE.txt
  See the License for the specific
  language governing permissions and limitations under the License.

  When distributing the software, include this License Header Notice in each
  file and include the License file at glassfish/legal/LICENSE.txt.

  GPL Classpath Exception:
  The Payara Foundation designates this particular file as subject to the "Classpath"
  exception as provided by the Payara Foundation in the GPL Version 2 section of the License
  file that accompanied this code.

  Modifications:
  If applicable, add the following below the License Header, with the fields
  enclosed by brackets [] replaced by your own identifying information:
  "Portions Copyright [year] [name of copyright owner]"

  Contributor(s):
  If you wish your version of this file to be governed by only the CDDL or
  only the GPL Version 2, indicate your decision by adding "[Contributor]
  elects to include this software in this distribution under the [CDDL or GPL
  Version 2] license."  If you don't indicate a single choice of license, a
  recipient has the option to distribute your version of this file under
  either the CDDL, the GPL Version 2 or to extend the choice of license to
  its licensees as provided above.  However, if you add GPL Version 2 code
  and therefore, elected the GPL Version 2 license, then the option applies
  only if the new code is made subject to such option by the copyright
  holder.

-->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>fish.payara.jakarta.tests.tck</groupId>
        <artifactId>tck</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>messaging-platform-tck</artifactId>

    <properties>
        <admin.pass>admin</admin.pass>
        <admin.pass.file>${project.build.directory}${file.separator}ripassword</admin.pass.file>
        <admin.pass.file.encoded>${admin.pass.file}.encoded</admin.pass.file.encoded>
        <admin.user>admin</admin.user>
        <connectionpoolid>${derby.poolName}</connectionpoolid>
        <datasourceclassname>${derby.dataSource}</datasourceclassname>
        <db.delimiter>;</db.delimiter>
        <db1>db1</db1>
        <db2>db1OnlyUsedIfDriverManagerIsYes</db2>
        <derby.classes>${derby.home}${file.separator}lib${file.separator}derbyclient.jar${path.separator}${derby.home}${file.separator}lib${file.separator}derbyshared.jar${path.separator}${derby.home}${file.separator}lib${file.separator}derbytools.jar</derby.classes>
        <derby.classpath>${derby.home}${file.separator}lib${file.separator}dbprocedures.jar${path.separator}${derby.home}${file.separator}lib${file.separator}derbynet.jar${path.separator}${derby.home}${file.separator}lib${file.separator}derbyshared.jar${path.separator}${derby.home}${file.separator}lib${file.separator}derbytools.jar</derby.classpath>
        <derby.dataSource>org.apache.derby.jdbc.ClientDataSource</derby.dataSource>
        <derby.dbName>derbyDB</derby.dbName>
        <derby.dml.file>derby${file.separator}derby.dml.sql</derby.dml.file>
        <derby.driver>org.apache.derby.jdbc.ClientDriver</derby.driver>
        <derby.home>${project.build.directory}${file.separator}${payara.home}${file.separator}javadb</derby.home>
        <derby.passwd>cts1</derby.passwd>
        <derby.poolName>cts-derby-pool</derby.poolName>
        <derby.port>1527</derby.port>
        <derby.properties>DatabaseName\=\"${derby.dbName}\":user\=${derby.user}:password\=${derby.passwd}:serverName\=${derby.server}:portNumber=${derby.port}</derby.properties>
        <derby.server>localhost</derby.server>
        <derby.startup.delay>5</derby.startup.delay>
        <derby.system.home>${derby.home}${file.separator}databases</derby.system.home>
        <derby.url>jdbc:derby://${derby.server}:${derby.port}/${derby.dbName};create=true</derby.url>
        <derby.user>cts1</derby.user>
        <exec.imqbrokerd>${ri.home}${file.separator}bin${file.separator}imqbrokerd${executable.extension}</exec.imqbrokerd>
        <exec.imqbrokerd.part2/>
        <exec.imqcmd>${ri.home}${file.separator}bin${file.separator}imqcmd${executable.extension}</exec.imqcmd>
        <exec.imqcmd.part2/>
        <exec.imqobjmgr>${ri.home}${file.separator}bin${file.separator}imqobjmgr${executable.extension}</exec.imqobjmgr>
        <exec.imqobjmgr.part2/>
        <exec.imqusermgr>${ri.home}${file.separator}bin${file.separator}imqusermgr${executable.extension}</exec.imqusermgr>
        <exec.imqusermgr.part2/>
        <ftable>ctstable2</ftable>
        <glassfish.lib.dir>${payara.home}${file.separator}glassfish${file.separator}lib</glassfish.lib.dir>
        <imqbin.loc>${s1as.imqbin.loc}</imqbin.loc>
        <javadb.dir>${payara.home}${file.separator}javadb</javadb.dir>
        <javadb.lib>${payara.home}${file.separator}javadb${file.separator}lib</javadb.lib>
        <javaee.home>${payara.home}${file.separator}glassfish</javaee.home>
        <jdbc.classpath>${javadb.lib}${file.separator}derbyclient.jar${path.separator}${javadb.lib}${file.separator}derbyshared.jar${path.separator}${javadb.lib}${file.separator}derbytools.jar</jdbc.classpath>
        <jdbc.db>derby</jdbc.db>
        <jdbc.driver>org.apache.derby.jdbc.ClientDriver</jdbc.driver>
        <jdbc.driver.classes>${javadb.lib}${file.separator}derbyclient.jar${path.separator}${javadb.lib}${file.separator}derbyshared.jar${path.separator}${javadb.lib}${file.separator}derbytools.jar</jdbc.driver.classes>
        <jdbc.maxpoolsize>64</jdbc.maxpoolsize>
        <jdbc.password>cts1</jdbc.password>
        <jdbc.steadypoolsize>32</jdbc.steadypoolsize>
        <jdbc.url>jdbc:derby://localhost:${derby.port}/derbyDB;create=true</jdbc.url>
        <jdbc.user>cts1</jdbc.user>
        <jndi.factory.initial>java.naming.factory.initial=com.sun.jndi.fscontext.RefFSContextFactory</jndi.factory.initial>
        <jndi.fs.dir>${root.tmp.directory}${file.separator}tmp${file.separator}ri_admin_objects</jndi.fs.dir>
        <jndi.provider.url>java.naming.provider.url=file:///${jndi.fs.dir}</jndi.provider.url>
        <jndiName>jdbc/DB1</jndiName>
        <password1>cts1</password1>
        <password2>cts1</password2>
        <pool.properties>${derby.properties}</pool.properties>
        <poolName>${derby.poolName}</poolName>
        <ptable>ctstable1</ptable>
        <restype>javax.sql.DataSource</restype>
        <ri.home>${payara.home}${file.separator}mq</ri.home>
        <s1as.imqbin.loc>${javaee.home}${file.separator}..${file.separator}mq${file.separator}bin</s1as.imqbin.loc>
        <sql.directory>.${file.separator}sql</sql.directory>
        <ts.home>.${file.separator}jakartaeetck</ts.home>
        <user1>cts1</user1>
        <user2>cts1</user2>
        <derby.version>10.17.1.0</derby.version>
        <derby.zip.url>https://dlcdn.apache.org/db/derby/db-derby-${derby.version}/db-derby-${derby.version}-bin.zip</derby.zip.url>
        <imq.varhome>${payara.home}${file.separator}glassfish${file.separator}domains${file.separator}domain1${file.separator}imq</imq.varhome>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.junit.vintage</groupId>
            <artifactId>junit-vintage-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.tck</groupId>
            <artifactId>jms</artifactId>
            <version>${jakarta.tck.messaging.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.container</groupId>
            <artifactId>arquillian-container-test-spi</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.container</groupId>
            <artifactId>arquillian-container-spi</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.core</groupId>
            <artifactId>arquillian-core-spi</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.test</groupId>
            <artifactId>arquillian-test-impl-base</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit5</groupId>
            <artifactId>arquillian-junit5-container</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit5</groupId>
            <artifactId>arquillian-junit5-core</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.tck.arquillian</groupId>
            <artifactId>arquillian-protocol-appclient</artifactId>
            <version>${jakarta.tck.arquillian.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jboss.shrinkwrap.resolver</groupId>
            <artifactId>shrinkwrap-resolver-api</artifactId>
            <version>3.2.0</version>
        </dependency>
        <dependency>
            <groupId>org.jboss.shrinkwrap.resolver</groupId>
            <artifactId>shrinkwrap-resolver-impl-maven</artifactId>
            <version>3.2.0</version>
        </dependency>
        <dependency>
            <groupId>org.jboss.shrinkwrap.resolver</groupId>
            <artifactId>shrinkwrap-resolver-api-maven</artifactId>
            <version>3.2.0</version>
        </dependency>
        <dependency>
            <groupId>org.jboss.shrinkwrap.resolver</groupId>
            <artifactId>shrinkwrap-resolver-spi-maven</artifactId>
            <version>3.2.0</version>
        </dependency>

        <dependency>
            <groupId>jakarta.tck.arquillian</groupId>
            <artifactId>arquillian-protocol-javatest</artifactId>
            <version>${jakarta.tck.arquillian.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.jboss.shrinkwrap.resolver</groupId>
                    <artifactId>shrinkwrap-resolver-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.jboss.shrinkwrap.resolver</groupId>
                    <artifactId>shrinkwrap-resolver-impl-maven</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.jboss.shrinkwrap.resolver</groupId>
                    <artifactId>shrinkwrap-resolver-api-maven</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.jboss.shrinkwrap.resolver</groupId>
                    <artifactId>shrinkwrap-resolver-spi-maven</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>jakarta.tck.arquillian</groupId>
            <artifactId>arquillian-protocol-common</artifactId>
            <version>${jakarta.tck.arquillian.version}</version>
        </dependency>
        <dependency>
            <groupId>jakarta.tck.arquillian</groupId>
            <artifactId>arquillian-protocol-lib</artifactId>
            <version>${jakarta.tck.arquillian.version}</version>
        </dependency>
        <dependency>
            <groupId>jakarta.tck.arquillian</groupId>
            <artifactId>tck-porting-lib</artifactId>
            <version>11.0.0-M1</version>
        </dependency>
        <dependency>
            <groupId>jakarta.tck</groupId>
            <artifactId>common</artifactId>
            <version>11.0.0-RC4</version>
        </dependency>
        <dependency>
            <groupId>jakarta.tck</groupId>
            <artifactId>dbprocedures</artifactId>
            <version>3.2.0</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>jakarta.persistence</groupId>
                    <artifactId>jakarta.persistence-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.derby</groupId>
            <artifactId>derbyclient</artifactId>
            <version>10.15.2.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.derby</groupId>
            <artifactId>derbytools</artifactId>
            <version>10.15.2.0</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>com.googlecode.maven-download-plugin</groupId>
                <artifactId>download-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>download-derby</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>${derby.zip.url}</url>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <skip>${skipTests}</skip>
                    <unpack>true</unpack>
                    <outputDirectory>${project.build.directory}</outputDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.6.1</version>
                <executions>
                    <execution>
                        <id>001-unpack</id>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>fish.payara.distributions</groupId>
                                    <artifactId>${payara.artifact}</artifactId>
                                    <version>${payara.version}</version>
                                    <type>zip</type>
                                    <overWrite>false</overWrite>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                    <execution>
                        <id>003-copy-protocol-lib</id>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>jakarta.tck.arquillian</groupId>
                                    <artifactId>arquillian-protocol-lib</artifactId>
                                    <version>${jakarta.tck.arquillian.version}</version>
                                    <type>jar</type>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${project.build.directory}${file.separator}protocol</outputDirectory>
                                    <destFileName>protocol.jar</destFileName>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                    <execution>
                        <id>004-copy-lib</id>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>jakarta.tck</groupId>
                                    <artifactId>common</artifactId>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${project.build.directory}${file.separator}lib</outputDirectory>
                                    <destFileName>common.jar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>jakarta.tck.arquillian</groupId>
                                    <artifactId>tck-porting-lib</artifactId>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${project.build.directory}${file.separator}lib</outputDirectory>
                                    <destFileName>tck-porting-lib.jar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>jakarta.tck</groupId>
                                    <artifactId>jms</artifactId>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${project.build.directory}${file.separator}lib</outputDirectory>
                                    <destFileName>jms-tck.jar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>org.apache.derby</groupId>
                                    <artifactId>derbyclient</artifactId>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${glassfish.lib.dir}</outputDirectory>
                                    <destFileName>derbyclient.jar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>org.apache.derby</groupId>
                                    <artifactId>derbytools</artifactId>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${glassfish.lib.dir}</outputDirectory>
                                    <destFileName>derbytools.jar</destFileName>
                                </artifactItem>
<!--                                <artifactItem>-->
<!--                                    <groupId>org.apache.derby</groupId>-->
<!--                                    <artifactId>derbyshared</artifactId>-->
<!--                                    <overWrite>true</overWrite>-->
<!--                                    <outputDirectory>${glassfish.lib.dir}</outputDirectory>-->
<!--                                    <destFileName>derbyshared.jar</destFileName>-->
<!--                                </artifactItem>-->
                                <artifactItem>
                                    <groupId>jakarta.tck.arquillian</groupId>
                                    <artifactId>arquillian-protocol-lib</artifactId>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${project.build.directory}${file.separator}lib</outputDirectory>
                                    <destFileName>arquillian-protocol-lib.jar</destFileName>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-dbprocedures-jar</id>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <skip>${skipTests}</skip>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>jakarta.tck</groupId>
                                    <artifactId>dbprocedures</artifactId>
                                    <version>${jakarta.tck.persistence.version}</version>
                                    <type>jar</type>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${javadb.lib}</outputDirectory>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>09-StopDomain1</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>stop-domain</argument>
                            </arguments>
                            <successCodes>
                                <successCode>0</successCode>
                                <successCode>1</successCode>
                            </successCodes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>10-StartDomain1</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>start-domain</argument>
                            </arguments>
                            <successCodes>
                                <successCode>0</successCode>
                                <successCode>1</successCode>
                            </successCodes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>11-create-jms-template</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>--host</argument>
                                <argument>localhost</argument>
                                <argument>--user</argument>
                                <argument>admin</argument>
                                <argument>--passwordfile</argument>
                                <argument>${project.basedir}${file.separator}j2ee.pass</argument>
                                <argument>--interactive=false</argument>
                                <argument>--echo=true</argument>
                                <argument>multimode</argument>
                                <argument>--file</argument>
                                <argument>${project.basedir}${file.separator}create.jms.template</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>use-remote-host</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>set</argument>
                                <argument>configs.config.server-config.jms-service.type=REMOTE</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>set-imqbroker</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>set</argument>
                                <argument>configs.config.server-config.jms-service.jms-host.default_JMS_host.name=imqbroker</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>use-imqbroker</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>set</argument>
                                <argument>configs.config.server-config.jms-service.default-jms-host=imqbroker</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>12-StopDomain1</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>stop-domain</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>002-StopDatabase</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>post-integration-test</phase>
                        <configuration>
                            <executable>${payara.asadmin}</executable>
                            <workingDirectory>${derby.basedir}</workingDirectory>
                            <arguments>
                                <argument>stop-database</argument>
                            </arguments>
                            <successCodes>
                                <successCode>0</successCode>
                                <successCode>1</successCode>
                            </successCodes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>003-StopDomain</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>post-integration-test</phase>
                        <configuration>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>stop-domain</argument>
                            </arguments>
                            <successCodes>
                                <successCode>0</successCode>
                                <successCode>1</successCode>
                            </successCodes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>004-StopBroker</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>post-integration-test</phase>
                        <configuration>
                            <executable>${exec.imqcmd}</executable>
                            <arguments>
                                <argument>shutdown</argument>
                                <argument>bkr</argument>
                                <argument>-u</argument>
                                <argument>${admin.user}</argument>
                                <argument>-passfile</argument>
                                <argument>${admin.pass.file}</argument>
                                <argument>-f</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <id>copy-derby-to-payara</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target unless="skip.setup">
                                <move todir="${payara.home}${file.separator}javadb">
                                    <fileset dir="${project.build.directory}${file.separator}db-derby-${derby.version}-bin"/>
                                </move>
                                <copy file="${payara.home}${file.separator}javadb${file.separator}lib${file.separator}derbytools.jar"
                                      todir="${payara.home}${file.separator}glassfish${file.separator}domains${file.separator}domain1${file.separator}lib"/>
                                <copy file="${payara.home}${file.separator}javadb${file.separator}lib${file.separator}derbyclient.jar"
                                      todir="${payara.home}${file.separator}glassfish${file.separator}domains${file.separator}domain1${file.separator}lib"/>
                                <copy file="${payara.home}${file.separator}javadb${file.separator}lib${file.separator}derbyshared.jar"
                                      todir="${payara.home}${file.separator}glassfish${file.separator}domains${file.separator}domain1${file.separator}lib"/>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>15-start-database</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <exec executable="${javadb.dir}${file.separator}bin${file.separator}startNetworkServer${script.extension}" spawn="true" dir="${javadb.dir}"/>
                                <echo message="Waiting 3 seconds for database in forked process to start..."/>
                                <sleep seconds="3"/>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>01-initdb</id>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <target>
                                <path id="jdbc.classpath">
                                    <pathelement path="${jdbc.driver.classes}"/>
                                    <path refid="maven.runtime.classpath"/>
                                </path>
                                <sql autocommit="true" classpathref="jdbc.classpath" delimiter="${db.delimiter}" driver="${jdbc.driver}" onerror="continue" password="${jdbc.password}" url="${jdbc.url}" userid="${jdbc.user}">
                                    <transaction src="${sql.directory}/${jdbc.db}/${jdbc.db}.ddl.sql"/>
                                </sql>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>04-init</id>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <target>
                                <delete failonerror="false" file="${admin.pass.file}"/>
                                <delete dir="${jndi.fs.dir}" failonerror="false"/>
                                <mkdir dir="${jndi.fs.dir}"/>
                                <echo message="Echoing: imq.imqcmd.password=${admin.pass} &gt;${admin.pass.file}"/>
                                <echo file="${admin.pass.file}" message="imq.imqcmd.password=${admin.pass}"/>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>05-encodeAdminPassword</id>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <target>
                                <echo message="Encode admin password in JMS RI or OpenMQ via (imqusermgr) ......"/>
                                <exec executable="${exec.imqusermgr}">
                                    <env key="IMQ_JAVAHOME" value="${java.home}"/>
                                    <arg line="${exec.imqusermgr.part2}"/>
                                    <arg line="encode -f -src ${admin.pass.file} -target ${admin.pass.file.encoded}"/>
                                </exec>
                                <move file="${admin.pass.file.encoded}" overwrite="true" tofile="${admin.pass.file}"/>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>06-list.tck.jms.objects</id>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <target>
                                <echo message="List JMS objects in JMS RI or OpenMQ object store via (imgobjmgr) ......"/>
                                <exec executable="${exec.imqobjmgr}">
                                    <env key="IMQ_JAVAHOME" value="${java.home}"/>
                                    <arg line="${exec.imqobjmgr.part2}"/>
                                    <arg line="list -j ${jndi.factory.initial} -j ${jndi.provider.url}"/>
                                </exec>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>07-startbkr</id>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <target>
                                <echo message="Start JMS RI or OpenMQ Broker via (imqbrokerd) ....."/>
                                <echo message="Executing command: ${exec.imqbrokerd} ${exec.imqbrokerd.part2} -reset store"/>
                                <exec executable="${exec.imqbrokerd}" spawn="true">
                                    <env key="IMQ_JAVAHOME" value="${java.home}"/>
                                    <arg line="${exec.imqbrokerd.part2} -reset store"/>
                                </exec>
                                <echo message="Sleeping 10 seconds ....."/>
                                <sleep seconds="10"/>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>08-create.tck.users</id>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <target>
                                <echo message="Create user j2ee, javajoe in JMS RI or OpenMQ via (imqusermgr) ......"/>
                                <exec executable="${exec.imqusermgr}">
                                    <env key="IMQ_JAVAHOME" value="${java.home}"/>
                                    <arg line="${exec.imqusermgr.part2}"/>
                                    <arg line="-i imqbroker add -u j2ee -p j2ee -g ${admin.user}"/>
                                </exec>
                                <exec executable="${exec.imqusermgr}">
                                    <env key="IMQ_JAVAHOME" value="${java.home}"/>
                                    <arg line="${exec.imqusermgr.part2}"/>
                                    <arg line="-i imqbroker add -u javajoe -p javajoe -g ${admin.user}"/>
                                </exec>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>stop-database</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <exec executable="${javadb.dir}${file.separator}bin${file.separator}stopNetworkServer${script.extension}" spawn="true" dir="${javadb.dir}"/>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>3.5.0</version>
                <configuration>
                    <trimStackTrace>false</trimStackTrace>
                </configuration>
                <executions>
                    <execution>
                        <id>messaging-tests-appclient</id>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                        <configuration>
                            <additionalClasspathElements>
                                <additionalClasspathElement>${payara.home}${file.separator}javadb${file.separator}lib${file.separator}derbytools.jar</additionalClasspathElement>
                                <additionalClasspathElement>${payara.home}${file.separator}javadb${file.separator}lib${file.separator}derbyclient.jar</additionalClasspathElement>
                                <additionalClasspathElement>${payara.home}${file.separator}javadb${file.separator}lib${file.separator}derby.jar</additionalClasspathElement>
                                <additionalClasspathElement>${payara.home}${file.separator}glassfish${file.separator}modules${file.separator}glassfish-naming.jar</additionalClasspathElement>
                                <additionalClasspathElement>${payara.home}${file.separator}glassfish${file.separator}modules${file.separator}jakarta.jms-api.jar</additionalClasspathElement>
                                <additionalClasspathElement>${payara.home}${file.separator}glassfish${file.separator}modules${file.separator}glassfish-corba-omgapi.jar</additionalClasspathElement>
                                <additionalClasspathElement>${payara.home}${file.separator}mq${file.separator}lib${file.separator}imq.jar</additionalClasspathElement>
                                <additionalClasspathElement>${payara.home}${file.separator}mq${file.separator}lib${file.separator}jms.jar</additionalClasspathElement>
                                <additionalClasspathElement>${payara.home}${file.separator}mq${file.separator}lib${file.separator}fscontext.jar</additionalClasspathElement>
                            </additionalClasspathElements>
                            <includes>
                                <include>com/sun/ts/tests/jms/**/*Test*.java</include>
                            </includes>
                            <!-- Select the @Tag("tck-appclient") tests -->
                            <groups>tck-appclient</groups>
                            <dependenciesToScan>jakarta.tck:jms</dependenciesToScan>
                            <systemPropertyVariables>
                                <PAYARA_HOME>${payara.home}</PAYARA_HOME>
                                <payara.home>${payara.home}</payara.home>
                                <payara.postBootCommands>create-file-user --groups staff:mgr:DIRECTOR --passwordfile ${project.build.directory}/../j2ee.pass j2ee
                                    create-file-user --groups guest:OTHERROLE --passwordfile ${project.build.directory}/../javajoe.pass javajoe
                                    set server-config.network-config.protocols.protocol.http-listener-1.http.trace-enabled=true
                                    create-jms-resource --restype jakarta.jms.Queue --property imqDestinationName=myQueue MY_QUEUE
                                    create-jms-resource --restype jakarta.jms.Topic --property imqDestinationName=myTopic MY_TOPIC
                                    create-jdbc-connection-pool --restype javax.sql.DataSource --datasourceclassname org.apache.derby.jdbc.ClientDataSource --property DatabaseName=derbyDB:serverName=localhost:PortNumber=1527:User=cts1:Password=cts1 --steadypoolsize 32 --maxpoolsize 64 cts-derby-pool
                                    create-jdbc-resource --connectionpoolid cts-derby-pool jdbc/DB1
                                    create-jms-resource --restype jakarta.jms.QueueConnectionFactory jms/QueueConnectionFactory
                                    create-jms-resource --restype jakarta.jms.TopicConnectionFactory jms/TopicConnectionFactory
                                    create-jms-resource --restype jakarta.jms.ConnectionFactory --property name=cFactory jms/ConnectionFactory
                                    list-jdbc-connection-pools
                                    list-jdbc-resources
                                    list-file-users</payara.postBootCommands>
                                <junit.log.traceflag>true</junit.log.traceflag>
                                <harness.log.traceflag>true</harness.log.traceflag>
                                <cts.harness.debug>true</cts.harness.debug>
                                <root.tmp.directory>${root.tmp.directory}</root.tmp.directory>
                                <java.io.tmpdir>${root.tmp.directory}${file.separator}tmp</java.io.tmpdir>
                                <project.basedir>${project.basedir}</project.basedir>
                                <arquillian.xml>appclient-arquillian.xml</arquillian.xml>
                                <ts.home>${ts.home}</ts.home>
                            </systemPropertyVariables>
                            <environmentVariables>
                                <PAYARA_HOME>${payara.home}</PAYARA_HOME>
                            </environmentVariables>
                        </configuration>
                    </execution>
                    <execution>
                        <id>messaging-tests-javatest</id>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                        <configuration>
                            <additionalClasspathElements>
                                <additionalClasspathElement>${payara.home}${file.separator}javadb${file.separator}lib${file.separator}derbytools.jar</additionalClasspathElement>
                                <additionalClasspathElement>${payara.home}${file.separator}javadb${file.separator}lib${file.separator}derbyclient.jar</additionalClasspathElement>
                                <additionalClasspathElement>${payara.home}${file.separator}javadb${file.separator}lib${file.separator}derby.jar</additionalClasspathElement>
                                <additionalClasspathElement>${payara.home}${file.separator}glassfish${file.separator}modules${file.separator}glassfish-naming.jar</additionalClasspathElement>
                                <additionalClasspathElement>${payara.home}${file.separator}glassfish${file.separator}modules${file.separator}jakarta.jms-api.jar</additionalClasspathElement>
                                <additionalClasspathElement>${payara.home}${file.separator}glassfish${file.separator}modules${file.separator}glassfish-corba-omgapi.jar</additionalClasspathElement>
                                <additionalClasspathElement>${payara.home}${file.separator}mq${file.separator}lib${file.separator}imq.jar</additionalClasspathElement>
                                <additionalClasspathElement>${payara.home}${file.separator}mq${file.separator}lib${file.separator}jms.jar</additionalClasspathElement>
                                <additionalClasspathElement>${payara.home}${file.separator}mq${file.separator}lib${file.separator}fscontext.jar</additionalClasspathElement>
                            </additionalClasspathElements>
                            <includes>
                                <include>com/sun/ts/tests/jms/**/*Test*.java</include>
                            </includes>
                            <!-- Select the @Tag("tck-javatest") tests -->
                            <groups>tck-javatest</groups>
                            <dependenciesToScan>jakarta.tck:jms</dependenciesToScan>
                            <systemPropertyVariables>
                                <PAYARA_HOME>${payara.home}</PAYARA_HOME>
                                <payara.home>${payara.home}</payara.home>
                                <payara.postBootCommands>create-file-user --groups staff:mgr:DIRECTOR --passwordfile ${project.build.directory}/../j2ee.pass j2ee
                                    create-file-user --groups guest:OTHERROLE --passwordfile ${project.build.directory}/../javajoe.pass javajoe
                                    set server-config.network-config.protocols.protocol.http-listener-1.http.trace-enabled=true
                                    create-jms-resource --restype jakarta.jms.Queue --property imqDestinationName=myQueue MY_QUEUE
                                    create-jms-resource --restype jakarta.jms.Topic --property imqDestinationName=myTopic MY_TOPIC
                                    create-jdbc-connection-pool --restype javax.sql.DataSource --datasourceclassname org.apache.derby.jdbc.ClientDataSource --property DatabaseName=derbyDB:serverName=localhost:PortNumber=1527:User=cts1:Password=cts1 --steadypoolsize 32 --maxpoolsize 64 cts-derby-pool
                                    create-jdbc-resource --connectionpoolid cts-derby-pool jdbc/DB1
                                    create-jms-resource --restype jakarta.jms.QueueConnectionFactory jms/QueueConnectionFactory
                                    create-jms-resource --restype jakarta.jms.TopicConnectionFactory jms/TopicConnectionFactory
                                    create-jms-resource --restype jakarta.jms.ConnectionFactory --property name=cFactory jms/ConnectionFactory
                                    list-jdbc-connection-pools
                                    list-jdbc-resources
                                    list-file-users</payara.postBootCommands>
                                <junit.log.traceflag>true</junit.log.traceflag>
                                <harness.log.traceflag>true</harness.log.traceflag>
                                <cts.harness.debug>true</cts.harness.debug>
                                <root.tmp.directory>${root.tmp.directory}</root.tmp.directory>
                                <java.io.tmpdir>${root.tmp.directory}${file.separator}tmp</java.io.tmpdir>
                                <arquillian.xml>arquillian.xml</arquillian.xml>
                                <ts.home>${ts.home}</ts.home>
                            </systemPropertyVariables>
                            <environmentVariables>
                                <PAYARA_HOME>${payara.home}</PAYARA_HOME>
                            </environmentVariables>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>